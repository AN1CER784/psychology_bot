from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from kbds.admin_kb import admin_kb
from kbds.user_kb import second_heading_kb, first_heading_kb, headings_kb, third_heading_kb

user_router_back = Router()
admin_router_back = Router()


@user_router_back.callback_query(F.data == "back_to_headings")
async def back_to_headings(callback: CallbackQuery, session: AsyncSession):
    """
    –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π —Ä—É–±—Ä–∏–∫–∏

    :param callback:
    :return:
    """
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—éüôÇ\n\n"
                                  "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é —Ä—É–±—Ä–∏–∫—É –∏–ª–∏ –∂–µ —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                                  reply_markup=await headings_kb(session, callback.from_user.id))


@user_router_back.callback_query(F.data == "back_to_chapters_1")
async def back_to_headings(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–µ—Ä–≤–æ–π —Ä—É–±—Ä–∏–∫–∏

    :param state:
    :param callback:
    :return:
    """
    await callback.answer()
    await callback.message.edit_text("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Ä—É–±—Ä–∏–∫–∏\n"
                                     "<b>–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π</b>", reply_markup=first_heading_kb)


@user_router_back.callback_query(F.data == "back_to_chapters_2")
async def back_to_headings(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–µ—Ä–≤–æ–π —Ä—É–±—Ä–∏–∫–∏

    :param callback:
    :param state:
    :return:
    """
    await callback.answer()
    data = await state.get_data()
    initial_message_id = data.get('initial_message_id')
    chat_id = data.get('chat_id')
    await callback.message.edit_text("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Ä—É–±—Ä–∏–∫–∏\n"
                                     "<b>–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å–ø—É—Ç–Ω–∏–∫–∞ –∂–∏–∑–Ω–∏?</b>", reply_markup=second_heading_kb)
    if initial_message_id:
        await callback.bot.delete_message(chat_id=chat_id, message_id=initial_message_id)
    await state.clear()


@user_router_back.callback_query(F.data == "back_to_chapters_3")
async def back_to_headings(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤ —Ç—Ä–µ—Ç—å–µ–π —Ä—É–±—Ä–∏–∫–∏

    :param state:
    :param callback:
    :return:
    """
    await callback.answer()
    await callback.message.edit_text("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Ä—É–±—Ä–∏–∫–∏\n"
                                     "<b>–°–µ–ø–∞—Ä–∞—Ü–∏—è</b> ‚úÇÔ∏è", reply_markup=third_heading_kb)


@user_router_back.callback_query(F.data.startswith("back_to_chapters_from_test"))
async def back_to_headings(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤

    :param callback:
    :return:
    """
    data = await state.get_data()
    init_message_id, init_message_chat_id = data.get('init_message_id'), data.get('init_message_chat_id')
    await callback.message.delete()
    await callback.bot.delete_message(chat_id=init_message_chat_id, message_id=init_message_id)
    await callback.answer()
    if 'test1' in callback.data:
        await callback.message.answer("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Ä—É–±—Ä–∏–∫–∏\n"
                                         "<b>–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π</b>", reply_markup=first_heading_kb)
    else:
        await callback.message.answer("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Ä—É–±—Ä–∏–∫–∏\n"
                                         "<b>–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å–ø—É—Ç–Ω–∏–∫–∞ –∂–∏–∑–Ω–∏?</b>", reply_markup=third_heading_kb)


@admin_router_back.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞

    :param callback:
    :return:
    """
    await callback.answer()
    await callback.message.edit_text("–í—ã –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞", reply_markup=admin_kb)
