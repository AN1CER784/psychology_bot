from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.utils.formatting import as_marked_section, Bold
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User
from database.orm_queries.common import orm_get_all_models
from database.orm_queries.user import orm_update_user_status_by_id
from filters.admin_filter import IsAdmin, admin_ids
from kbds.admin_kb import admin_kb, back_admin_kb

admin_router_users_management = Router()
admin_router_users_management.message.filter(IsAdmin())


@admin_router_users_management.callback_query(F.data == "manage_users")
async def manage_users(callback: CallbackQuery, session: AsyncSession):
    """
    Manage users

    :param callback:
    :param session:
    :return:
    """
    await callback.answer()
    all_users = await orm_get_all_models(session, User)
    free_users = []
    blocked_users = []
    for user in all_users:
        if user.status:
            free_users.append(user)
        else:
            blocked_users.append(user)
    message_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–æ—Ç–∞.\n–î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\nblock_user - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\nfree_user - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n\n"
    if free_users:
        message_text += as_marked_section(
            Bold("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"),
            *(f"/block_user_{user.id} - @{user.name} - +{user.phone}" for user in free_users),
            marker="‚úÖ",
        ).as_html()
    else:
        message_text += as_marked_section(
            Bold("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"),
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            marker="‚úÖ",
        ).as_html()

    if blocked_users:
        message_text += as_marked_section(
            Bold("\n\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"),
            *(f"/free_user_{user.id} - @{user.name} - +{user.phone}" for user in blocked_users),
            marker="üö´",
        ).as_html()
    else:
        message_text += as_marked_section(
            Bold("\n\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"),
            "–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            marker="üö´",
        ).as_html()

    await callback.message.edit_text(message_text, reply_markup=back_admin_kb)


@admin_router_users_management.message(lambda message: message.text and message.text.startswith("/block_user"))
async def block_user(message: Message, session: AsyncSession):
    """
    Block user

    :param message:
    :param session:
    :return:
    """
    user_id = int(message.text.split('_')[-1])
    if user_id not in admin_ids:
        await orm_update_user_status_by_id(session, user_id, False)
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", reply_markup=admin_kb)
    else:
        await message.answer("–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_kb)


@admin_router_users_management.message(lambda message: message.text and message.text.startswith("/free_user"))
async def free_user(message: Message, session: AsyncSession):
    """
    Free user

    :param message:
    :param session:
    :return:
    """
    user_id = int(message.text.split('_')[-1])
    await orm_update_user_status_by_id(session, user_id, True)
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", reply_markup=admin_kb)
